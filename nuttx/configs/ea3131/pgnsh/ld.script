/****************************************************************************
 * configs/ea3131/pgnsh/ld.script
 *
 *   Copyright (C) 2010 Gregory Nutt. All rights reserved.
 *   Author: Gregory Nutt <spudmonkey@racsa.co.cr>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name NuttX nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* The LPC3131 has 192Kb of ISRAM beginning at virtual address 0x1102:8000.
 * LPC313x boot ROM expects the boot image be compiled with entry point at
 * 0x1102:9000.  A 128b header will appear at this address (applied by
 * lpc313xImgCreator) and the executable code must begin at 0x1102:9080.
 *
 * The .text vitual address space begins at the same location as the physical
 * address space:  0x1102 8000.  The virtual space is broken up into three
 * regions:
 *
 * locked - Pages locked in memory.     Start: 0x1102 8000 Size: 36Kb
 * paged  - Pages in nonvolatile store. Start: 0x1103 1000 Size: 384Kb
 * data   - .data/.bss/heap.            Start: 0x1109 1000 Size: 44Kb
 */

MEMORY
{
    locked (rx) : ORIGIN = 0x11029080, LENGTH = 36K - 4224
    paged  (rx) : ORIGIN = 0x11031000, LENGTH = 384K
    data   (rw) : ORIGIN = 0x11091000, LENGTH = 44K
}

OUTPUT_ARCH(arm)
ENTRY(_stext)
SECTIONS
{
	.locked : {
		_slocked = ABSOLUTE(.);
		*(.vectors)
		*(.locked)
		_elocked = ABSOLUTE(.);
	} >locked
	_eronly = ABSOLUTE(.);		/* See below                    */

	.paged : {
		_spaged = ABSOLUTE(.);
		*(.text .text.*)        
		*(.fixup)
		*(.gnu.warning)
		*(.rodata .rodata.*)        
		*(.gnu.linkonce.t.*)
		*(.glue_7)
		*(.glue_7t)
		*(.got)
		*(.gcc_except_table)
		*(.gnu.linkonce.r.*)
		_epaged = ABSOLUTE(.);
	} > paged

	_eronly = ABSOLUTE(.);

	.data : {
		_sdata = ABSOLUTE(.);
		*(.data .data.*)
		*(.gnu.linkonce.d.*)
		CONSTRUCTORS
		_edata = ABSOLUTE(.);
	} > data AT > locked

	.ARM.extab : {
		*(.ARM.extab*)
	} >data

	.ARM.exidx : {
		__exidx_start = ABSOLUTE(.);
		*(.ARM.exidx*)
		__exidx_end = ABSOLUTE(.);
	} > data

	.bss : {
		_sbss = ABSOLUTE(.);
		*(.bss .bss.*)
		*(.gnu.linkonce.b.*)
		*(COMMON)
		_ebss = ABSOLUTE(.);
	} > data
					/* Stabs debugging sections.	*/
	.stab 0 : { *(.stab) }
	.stabstr 0 : { *(.stabstr) }
	.stab.excl 0 : { *(.stab.excl) }
	.stab.exclstr 0 : { *(.stab.exclstr) }
	.stab.index 0 : { *(.stab.index) }
	.stab.indexstr 0 : { *(.stab.indexstr) }
	.comment 0 : { *(.comment) }
	.debug_abbrev 0 : { *(.debug_abbrev) }
	.debug_info 0 : { *(.debug_info) }
	.debug_line 0 : { *(.debug_line) }
	.debug_pubnames 0 : { *(.debug_pubnames) }
	.debug_aranges 0 : { *(.debug_aranges) }
}
