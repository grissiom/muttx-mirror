/************************************************************
 * up_head.S
 *
 *   Copyright (C) 2007 Gregory Nutt. All rights reserved.
 *   Author: Gregory Nutt <spudmonkey@racsa.co.cr>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name Gregory Nutt nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ************************************************************/

/************************************************************
 * Included Files
 ************************************************************/

#include <nuttx/config.h>
#include "c5471.h"

/************************************************************
 * Definitions
 ************************************************************/

/************************************************************
 * OS Entry Point
 ************************************************************/

/* We assume the bootloader has already initialized most of the h/w for
 * us and that only leaves us having to do some os specific things
 * below.
 */
        .global __start
	.type	__start, #function
__start:

/* First, setup initial processor mode */

	mov	r0, #(SVC_MODE | I_BIT | F_BIT )
	msr	cpsr, r0

/* Setup system stack (and get the BSS range) */

	adr	r0, LC0
	ldmia   r0, {r4, r5, sp}

/* Clear system BSS section */

	mov	r0, #0
1:	cmp	r4, r5
	strcc	r0, [r4], #4
	bcc	1b

/* Copy system .data sections to new home in RAM. */

#ifdef CONFIG_BOOT_FROM_FLASH

	adr	r3, LC2
	ldmia	r3, {r0, r1, r2}

1:	ldmia	r0!, {r3 - r10}
	stmia	r1!, {r3 - r10}
	cmp	r1, r2
	blt	1b

#endif

/* Initialize Kernel Stack Contents */

#if 0
	mov	r1, sp
	sub	r1, r1, #INITIAL_STACK_SIZE
	ldr	r0, L_STACK_MAGIC
	str	r0, [r1], #4
	ldr	r0, L_STACK_UNTOUCHED_MAGIC
1:      cmp	r1, sp
        strcc	r0, [r1], #4
        bcc	1b
#endif

/* Jump to OS entry */

	mov	fp, #0
	b	os_start

/* Variables */

LC0:	.long	_sbss
	.long	_ebss
	.long	CONFIG_STACK_POINTER+CONFIG_PROC_STACK_SIZE-4

#ifdef CONFIG_BOOT_FROM_FLASH
LC2:	.long	_eronly		@ Where .data defaults are stored in Flash.
	.long	_sdata		@ Where .data needs to reside in SDRAM.
	.long	_edata
#endif

#if 0
L_STACK_UNTOUCHED_MAGIC: .long 0xfeef1ef0
L_STACK_MAGIC:           .long 0xdeadbeef
#endif
	.end

