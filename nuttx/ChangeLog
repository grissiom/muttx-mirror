0.1.0 2007-03-09  Gregory Nutt <spudmonkey@racsa.co.cr>

	* Initial Release
	* Support for Linux user mode simulation and TI
	  TMS320C5471 (Arm7) provided

0.1.1 2007-03-14  Gregory Nutt <spudmonkey@racsa.co.cr>

	* Corrected an error in interrupt level context switching
	  for C5471
	* Added fgets() and gets() logic; verified c5471 console read.
	* Corrected error in reading from the C5471 serial port:
          Improper use of semaphore can cause deadlock.
	* Fixed an error in the memory cleanup:  The idle task
	  cannot take sempahores (because it must always be ready
	  to run).
	* Tasks can now accept a configurable maximum number of
	  input parameters (argc)
	* _task_init() was divided into separate functions that
	  require fewer parameters.  This was necessary to keep
	  the stack usage down for the 8051/2 (which has only
	  256 bytes of stack).
	* Attempts to use C5471 console from interrupt handlers
	  can cause errors. Added a special path for this case.
	* Refuse calls to sem_wait and sem_trywait from interrupt
	  handlers.  This was happening because interrupt handlers
	  were calling printf-like functions.
	* Added strtok() and strtok_r()
	* Added a simple shell called nsh (see examples/nsh).
	* Platform support for 8052 is complete but not stable
	  when the timer interrupt is enabled.  Seems to be an
	  issue when SP enters indirect address space.
	* Documentation updates

0.1.2 2007-03-19  Gregory Nutt <spudmonkey@racsa.co.cr>

	* Add dirent.h, opendir(), readdir(), closedir(), etc.
	* Add strerror()
	* Added 'ls' command to nsh
	* Added C5471 watchdog driver
	* Fixed another bug where free() is called from IDLE task.
	  Can't do this; the caller must be able to wait for access
	  to memory.
	* Fixed bugs associated with debug output:
          Cannot do dbg() in middle of context switch logic.
	  because it may require use of semaphores and cause
	  additional context switches. lldbg() is safe.
	* Interrupt must be disabled throughout all context switches.
	* Separated C5471 serial driver; a shareable part is
	  in drivers/. ; the C5471 specific part is in arch/C5471.
	  serial.h defines the interface.
	* Fixed mq_receive() and mq_send() -- bad memcpy()
	* Fixed C5471 signal deliver logic: use of dbg() and
          other actions by use signal handler can alter errno.
          need to protect errno during signal handling.
	* Fixed uninitialized variable in filesystem that could
	  cause various problems
	* Added a test for roundrobin scheduler.

0.2.1 2007-03-22  Gregory Nutt <spudmonkey@racsa.co.cr>

	* Fix error in handing signed decimal in vsprintf().
	* Major restructuring of header files to get closer to
	  POSIX compliance.
	* Eliminate compilation warnings that that crept into
	  recent check-ins
	* Add kill()
	* Added support for POSIX timers
	* Some Documentation updates
	* Added support for the Neuros OSD / DM320

0.2.2 2007-03-26 Gregory Nutt <spudmonkey@racsa.co.cr>
	* Created the configs/ directory; separated board configuration
	  from processor architecture logic
	* Add memory leak detection test to examples/ostest
	* Corrected memory leak in OS pthread join logic
	* Corrected memory leaks in examples/ostest due to failures
	  to join or detach from pthreads.
	* Added pthread_once(), pthread_kill(), pthread_sigmask()
	* Added pthread_barrierattr_*() APIs
	* Added pthread_barrier_init(), pthread_barrier_destroy(), and
	  pthread_barrier_wait();
	* Added pthread barrier test
	* Added protection so that errno cannot be modified from
	  interrupt handling.
	* sched_setparam(), sched_setscheduler() now correctly set
	  errno; pthread_setscheduler() now returns the correct errno.
	* Added pthread_setschedprio().
	* Added directories to hold board-specific header files
	* Added directories to hold board-specific drivers

0.2.3 2007-03-29 Gregory Nutt <spudmonkey@racsa.co.cr>

	* mq_receive and mq_send now return errno's appropriately
	* mq_receive and mq_send are now correctly awakened by signals.
	* Fixed an unmatched sched_lock/unlock pair in task_delete().
	* sched_lock must be called in _exit() because operation of
	  task_delete() can cause pending tasks to be merged and a
	  context switch to occur.
	* Added mq_timedreceive() and mq_timedsend()
	* signal mask is now inherited by both child tasks and threads.
	* Improved sharebility of stdout among pthreads (only).  Nothing
	  was broken, but by moving the mutual exclusion logic to a
	  higher level, the printf output is more readable.
	* Fixed a bug in file system cleanup:  A list was being deleted
	  before the buffers contained in the list.
	* Fixed a bug in the wait-for-message-queue-not-empty logic.
	* Added a test of timed mqueue operations; detected and corrected
	  some mqueue errors.
	* Identified and corrected a race condition associated with
	  pthread_join.  In the failure condition, memory was being
	  deallocated while still in use.

0.2.4 2007-04-28 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Verfied c5471 build under Cygwin on WinXP
	* Makesystem changes to better support different SoCs.
	* Made arch/c5471/include and arch/dm320/include identical in
	  preparation for merging into arch/arm
	* Logic from arch/c5471 and arch/dm320 combined into arch/arm.
	  arch/c5471 and arch/dm320 are deprecated and will be removed
	  when the new c5471 and dm320 logic is verified.

0.2.5 2007-05-19 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Corrected some build/configuration issues introduced with the
	  last release.
	* Added support for the NXP 214x processor on the mcu123.com lpc214x
	  development board (untested)
	* Added support for block devices.
	* Simulated target now exports a VFAT filesystem
	* Begin support for VFAT filesystem (missing functionalit)
	* Added mount() and umount()
	* Fix bug in memcmp return value
	* Fix errors in timeslice calculation (several places)
	* Added missing irqrestore() in timer_deletall().
	* close() was not closing the underlying device.
	* Added fsync()
	* Added strspn() and strcspn()

0.2.6 2007-05-26 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Added unlink(), mkdir(), rmdir(), and rename()
	* Fixed several serious FAT errors with oflags handling (&& instead of &)
	* Added FAT support for unlink(), mkdir(), rmdir(), and rename
	* Added FAT support for opendir(), closedir(), readdir(), seekdir(),
	  telldir(), rewindir().
	* Fixed ARM compilation errors introduced in 0.2.5 (that is what I get
	  for only testing on the simulation).

0.2.7 2007-06-09 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Added stat() to fs layer and to FAT
	* Fixed reference counting errors associated with mounted filesystems
	* Added fat_getattrib() and fat_setattrib()
	* Added statfs() to fs layer and to FAT
	* Correct file name extension in tools/zipme.sh
	* Fix error in dependencies in 8051/2 Makefile
	* sched/Makefile: Don't build sleep() or usleep() if signals are disabled
	* sched/sched_setparam.c: Remove redundant disabling of interrupts
	* sched/usleep.c: Fixed nsec calculation
	* lib/lib_strcspn.c: Function incorrectly named strspn().
	* examples/ostest/main.c:  Errors in SDCC version of a memcpy() call
	* examples/ostest/sighand.c: Don't call fflush() if streams are disabled
	* include/limits.h, include/time.h, sched/clock_internal.h: A support for
	  using selectable system timer frequency.
	* Fixed error in mountpoint related conditional compilation introduced
	  in 0.2.5
	* Restructured some Makefiles to better handle enabling and disabling
	  NuttX features without having so much conditional compilation in the
	  source files.
	* tools/mkconfig.c: No longer depends on asprintf() and _GNU_SOURCE and
	  so should now build in non-GNU, non-GLIBC environments.
	* include/nuttx/compiler.h: Fix for using SDCC with the Z80.
	* include/assert.h & arch/pjrc-8051/src/up_assert.c: SDCC does support
	  __FILE__and __LINE__ (not tested)
	* examples/ostest/barrier.c: Don't call usleep() when signals are
	  disabled.

0.2.8 2007-07-02 Gregory Nutt <spudmonkey@racsa.co.cr>
	* tools/Makefile.mkconfig: Under Cygwin, executable has a different name
	* tools/mkdeps.sh & arch/arm/src/Makefile: Corrected a problem makeing dependencies
	* tools/zipme.sh: Force directory name to be nuttx-xx.yy.zz
	* fs/fs_opendir.c: Correct errors in semaphore usage that can cause deadlock.
	* lib/lib_getopt.c: Added getopt() support
	* examples/nsh/:  NSH now supports cat, mount, umount, and mkdir.  ls supports
	  -l -s, and -R
	* Added basic OS support to manage environment variables:  environment
	  storage, cloning on task creation, sharing on pthread creation, destruction
	  on thread/task exit.
	* Add environment variables APIs:  environ, getenv, putenv, clearenv, setenv,
	  unsetenv
	* Correct an error in realloc() when the block is extended "down" in memory.
	  In this case, the old memory contents need to be copied to the new location
	  and an allocated bit was not being set.
	* examples/ostest/: Added an environment variable test.
	* examples/nsh/: Break into several files.
	* lib/: Added strrchr, basename, dirname
	* examples/nsh/: Add cp, rm, rmdir, set, unset commands. echo will now print
	  environment variables.

0.3.0 2007-11-06 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Imported uIP into the tree (see
	   http://www.sics.se/~adam/uip/index.php/Main_Page)
	* Adding socket(), bind(), connect()
	* Added snprintf()
	* Added send() and sendto(); integrate write() and close() with socket descriptors.
        * Added recv() and recvfrom().
	* Added getsockopt() and setsockopt()
	* Documentation updated to address socket interfaces.
	* Implemented receive timeouts via setsockopt(SO_RCVTIMEO).
	* Provide support for multiple network devices
	* Implement socket ioctl() calls to set addresses
	* Added listen() and accept()
	* Added DM90x0 ethernet driver
	* ARP timer is now built into the network layer
	* Basic client functionality verified: TCP socket(), bind(), connect(), recv(), send().

0.3.1 2007-11-19 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Separated net/uip/uip.c into several functions in several files.
	* Corrected a TCP problem where packets were dropped because there was no
	  recv() in place but the packet was being ACKed.  There are still TCP
	  recv buffering issues, but this is part of a larger buffering issue.
	* Basic server functionality verified: TCP listen(), accept()
	* Fix DM90x0 driver problem that caused TX overruns
	* Add strncmp()
	* Added TCP/IP read-ahead buffer to minimize failed ACKs and packet loss.

0.3.2 2007-11-23 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Add strcat() and strncat()
	* Integrated uIP micro webserver
	* Corrected a serious bug in TCP queue management
	* Fix leak in socket close logic
	* Add TX notification to driver so that it can respond faster to
	  the availability of TX data.
	* Moved urgent data info into device structure.
	* TCP and ICMP protocols can now be disabled.
	* Added UDP test in examples/udp
	* Verified/debugged UDP socket(), bind(), sendto() and recvfrom() logic
	  using examples/udp
	* recvfrom() and accept() now correctly return the remote address.
	* Fixed computation error in ntohl().

0.3.3 2007-11-28 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Removed unused uIP files
	* sched/, mm/, and net/ subystem debug can not be selectively enabled/disabled
	* Correct socket close logic -- needs to disconnect TCP socket on close
	* uIP webserver now seems to be fully functional
	* fs/ and lib/ subystem debug can not be selectively enabled/disabled
	* Added vsnprintf
	* Integrated uIP telnetd
	* Add missing logic to readahead buffer logic
	* examples/nettest uses larger buffers
	* Improved ACK handling in send() to better hander deferred acknowledgements
	  and polling intervals.  Greatly improves send performance.

0.3.4 2007-12-10 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Added and partially verified DHCP server logic (netutils/dhcpd)
	* Fix BROADCAST=y compilation problems
	* Fix UDP recvfrom timeout bug
	* Correct processing of input UDP broadcast packets.
	* Verfied basic DHCP client functionality (netutils/dhcpc)
	* Implemented send() timeout logic
	* Added and verifed a TELNETD front end to NSH (examples/nsh)
	* Add a skeleton Ethernet device driver (drivers/net/skeleton.c)
	* Added C5471 Ethernet device driver (arch/arm/src/c5471/c5471_ethernet.c)
	* Found and fixed several problems in uIP when compiled for ARM with optimization.

0.3.5 2007-12-18 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Added inet_ntoa() and ether_ntoa()
	* Added netdev_foreach() to support traversal of registered network devices
	* Added support for 'ifconfig' command to NSH (examples/nsh)
	* Moved MAC and ethernet definitions to net/ethernet.h
	* Fix sim and DM90x0 compilation errors introduced in 0.3.4
	* Fixed errors in C5471 configuration files for examples/uip
	* Modified DHCPC (netutils/dhcpc) so that it should work in environments where
	  there are more than one DHCPD server.
	* NSH ifconfig command now shows uIP status was well (examples/nsh)

0.3.6 2008-01-06 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Changes for use with SDCC compiler
	* Added a simulated z80 target
	* Fix deadlock errors when using stdio but with no buffering
	* Add support for Pascal P-Code interpreter

0.3.6.1 2008-01-07 Gregory Nutt <spudmonkey@racsa.co.cr>

	* The initial 0.3.6 release including an error that prevented
	  building successfully if the Pascal add-on was
	  was not present.

0.3.7 2008-01-31 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Added support for the Zilog Z16F using the Zilog Z16F2800100ZCOG
	  Development Kit.
	* Add support toolchains that do not support making of dependencies
	* Fix Cygwin build with spaces in directory names
	* Name make system changes to deal with non-GNU toolchains (i.e., Zilog)
	* Add support for Windows native toolchains that cannot follow Cygwin soft links
	* Modified serial driver interface to handle hardware with non-16550A-like
	  interrupt architecture (like the Z16F)
	* Added a "dumb" serial console driver to simplify OS bringup
	* Corrected a bug that caused the errno value of one task to be clobbered
	  when a different task exits.  Effects all architectures.

0.3.8 2008-02-10 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Added a test case to verify the Pascal P-Code interpreter
	* Added /dev/zero
	* 'errno' is now defined to be *get_errno_ptr() with no name conflicts
	* Added lseek() and fseek()
	* Integrated Pascal interpreter test case on the simulation platform.  Needs
          pascal-0.1.1.
	* Add Pascal test case on the z16f platform.  Needs pascal-0.1.2 (does not
          yet work due to some tool issues).
	* C buffered I/O fixes:
	  - Fix fflush() return value,
	  - Add correct fflush behavior when the FILE argument is null.
	  - Add logic to a correctly handle read/write access on the same FILE
	  - fseek() flushes read/write data when before moving the file pointer
	  - When read data is flushed, reposition the file pointer to account for
	    buffered, but unread data
	* Pascal P-Code files are now standardized to big-endian for portability
	* Fix a build problem with z80 and SDCC 2.7.0 (format of a map file changed)
	  (see bug 1887170)
	* Pascal P-Code runtime now compiles with the SDCC toolchain.
	* Added a generic CAN driver.  This driver is untested as of this writing.
	* Corrected DM320 UART configuration problem

0.3.9 2008-03-09 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Began adding support for the ZiLOG Z8Encore! microcontroller for the Z8Encore000ZCO
	  development board and the Z8F6403 part.
	* Fix broken 'clean' target on z80sim configurations
	* Re-structure arch/z80 to provide support for all ZiLOG 8-bit microcontrollers (ez8
	  in particular for now).
	* Add support for TRS80-Model 3 based on the xtrs emulation (http://www.tim-mann.org/xtrs.html)
	  Per patch from Jacques Pelletier.
	* In all shell scripts, change #!/bin/sh to #!/bin/bash to resolve problems in
	  Ubuntu where /bin/sh is a link to dash.
	* Z8Encore! port verified on ZDS-II instruction set/chip simulator.

0.3.10 2008-05-15 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Add support for the ZiLOG EZ80Acclaim microcontrooler (EZ80F91 chip).
	* Add configuration for the ZiLOG z8f64200100kit development kit, Z8F6423 part.
	* Add configuration for the ZiLOG ez80f0910200kitg development kit, EZ80F091 part.
	* Correct critical list handling errors in task shutdown logic: One in timer
	  deletion logic (timer_delete.c) and one in stream logic (lib_init.c) reported
	  by kwonsk.

0.3.11 2008-06-01 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Add support for recursive mutexes.
	* Eliminate a memory leak -- contained watchdog instance was not being
	  deleted with a POSIX timer was deleted reported by kwonsk.
	* Eliminate a deadlock condition in opendir() reported by kwonsk.
	* Fix several FAT filesystem problems reported by kwonsk (Changes not yet
	  verified).
	* Host simulator no longer uses Linux system calls directly; Now works with Cygwin.
	* Fix an error that occurs when a POSIX timer is deleted by the timer signal handler.
	* Add logic to allow the examples/ostest to be run repetitively as an endurance test.
	* Add a ramdisk block driver

0.3.12 2008-08-10 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Improved solution to POSIX timer lifetime controls bug fixed in 0.3.11.
	* Add test for recursive mutexes
	* Correct bug in recursive mutex logic
	* Add mkfifo()
	* Add pipe() and test for both pipes and fifos
	* Attempts to open a FIFO will now block until there is at least one writer
	* Add test/Fixed errors in FIFO reader/writer interlocks
	* Removed limitation: task_create() was only dup'ing 3 file descriptors (now
	  dups all open file descriptors).
	* Added a test for redirection of stdio through pipes
	* Fixed error in dup and dup2: Must call open/close methods in fs/driver so that
	  driver can correctly maintain open reference counts.
	* Same issue on closing file descriptors in exit()
	* Fixed in error in stdio flush logic.  Needed ssize_t vs size_t for error
	  check.
	* Moved all FAT related files from fs to fs/fat
	* Implemented mkfatfs(), a non-standard API to create a FAT filesystem on a
	  block device (not yet tested).
	* Added a test for mkfatfs() on a RAM disk in examples/mount and verified
	  basic mkfatfs functionality for FAT12.

0.3.13 2008-09-01 Gregory Nutt <spudmonkey@racsa.co.cr>

	* NSH: Added mkfatfs, mkfifo, sleep, usleep and nice commands
	* Fixed problem with console input in Cygwin-based simulator; NSH now works
	  with simulator.
	* NSH will now execute commands in background
	* sched_get_priority_max/min returned error on SCHED_RR
	* Removed duplicate getenv() implementation in /lib
	* Correct detection of End-of-File in fgets
	* NSH: Implemented sh and crude script handler
	* Fix prototype of read() and write(). Need to use ssize_t and size_t, not
	  int and unsigned int.
	* NSH now supports redirection of command output
	* NSH can now use both telnet and serial front ends together
	* NSH: $variable can be used for any command value
	* Fixed an error in opendir() that could cause an assertion to fail
	  inappropriately.
	* Correct an error in the FAT that caused files opened for writing with
	  O_APPEND to fail.  The file was not being properly positioned to the
	  end of the file in that case.
	* NSH now supports last exit status $?
	* NSH now supports if-then[-else]-fi construct
	* NSH now supports comments beginning with '#'
	* NSH now supports commands to inspect and modify memory
	* NSH cat command now supports multiple files on command line
	* Add chdir() and getcwd()
	* Fix error in getopt() when called with argc==1
	* Fix error in stat() when used on the root directory
	* NSH: Add cd and pwd commands and current working directory to all NSH
	  commands that refer to paths.
	* Fix errors and warnings introduced into Linux sim build because of recent
	  Cygwin-based sim changes
	* NSH: Add mem command to display heap usage
	* Added telnet NSH configuration for Neuros OSD.
	* Basic integration of concurrent telnet/serial NSH functional on Neuros
	  OSD.
	* Fixed a critical bug that effects the way that environment variables are
	  shared amongst pthreads.
	* uIP port enhance to support multi-threaded, concurrent socket access.  So,
	  for example, one thread can be reading from a socket while another is
	  writing to the socket.

0.3.14 2008-09-08 Gregory Nutt <spudmonkey@racsa.co.cr>
	* FAT FS now uses position variable in struct file.  This simplifies operations
	  like ftell().
	* fseek() needs to discard bytes buffered by ungetc().
	* Corrected ftell() return value.
	* Added fsetpos() and fgetpos().
	* NSH: Now supports 'test' and '[' commands
	* Correct error in send() timeout logic.
	* Correct error in multi-threaded socket handling in send() and sendto().
	  Outgoing data could overwrite incoming data.
	* Add support to uIP for application access to ICMP protocol stacks; Add
	  ping request logic.
	* NSH: Add ping command
	* Correct IP checksum calculation in ICMP and UDP message send logic.
	* NSH: Created an HTML document and a more detailed README file describing NSH.
	* Added basic TFTP client logic (netutils/tftpc).
	* NSH: Add get and put commands to support TFTP get and put operations.
	* NSH: Added a mkrd command that will create a RAMDISK that can be formatted
	  and mounted.
	* Corrected a critical bug that prevent recvfrom from receiving packets from
	  any remote UDP port.
	* NSH: Add hexadecimal dump command (xd)
	* Fixed several critical bugs with regard to fat reading and writing and FAT12
	  accesses.  Basically the FAT FS only worked with my tiny test files and test
	  cases.  A lot of stronger FAT tested is needed!!
	* Fixed another FAT bug in implementation of FAT lseek; this prohibit correct
	  random access to large files.

0.3.15 2008-09-20 Gregory Nutt <spudmonkey@racsa.co.cr>
	* Added support for ROMFS filesystem.
	* Added a simple test the ROMFS filesystem (examples/romfs)
	* NSH: Use ROMFS to provide an option for a start-up script at /etc/init.d/rcS
	* Add definition of BIOC_XIPBASE ioctl and implement in RAM disk block driver.
	  This is a low level requirement for eXecute In Place (XIP) support.
	* Add a FIOC_MMAP to perform memory mapping of a file and implemented the
	  ioctl command in the ROMFS filesystem.  This is a requirement for eXecute
	  In Place (XIP) support.
	* Add mmap() API with restricted capability (only for XIP support)
	* Extend ROMFS test at /examples/romfs to verify mmap() and XIP support.
	* Add support for Intel Hex format output using objcopy
	* Completed the basic port of the NXP LPC2148 on the mcu123.com board.
	  The basic port includes successful booting, timer interrupts, serial console,
	  succesfully passing the examples/ostest, and a NuttShell (NSH) configuration.
	* ARM architectures now support drivers/lowconsole.c

0.3.16 2008-10-10 Gregory Nutt <spudmonkey@racsa.co.cr>
	* Added header files defining a common USB device controller architecture
	* Added USB device side driver for the LPC214x
	* Correct the frequency of system timer interrupts in the NXP LPC214x port
	  (off by 20x in nuttx-0.3.15)
	* Add an option to set aside a separate stack for interrupt handling (ARM only).
	  This is useful when memory is constrained, there are multiple tasks, and
	  the interrupt stack requirement is high (as when USB is enabled).
	* Added USB serial class device side driver (emulates Prolific PL2303
	  serial-to-USB adaptor)
	* Add LPC214x USB serial configuration; Add examples/usbserial test
	* Added USB device side driver for the DM320 (untested at initial release)
	* Fixed an error in a previous (post 0.3.15) check-in that broke the LPC214x
	  system timer.
	* Fixed serial driver bugs related to (1) open counts and (2) recognizing
	  O_NONBLOCK on read.
	* Fixed an error in read(); it was not setting the errno on errors returned
	  from the driver.

0.3.17 2008-10-28 Gregory Nutt <spudmonkey@racsa.co.cr>
	* Incorporate patch "[2164503] nuttx-0.3.16 does not build for ARM with USB disabled"
	* Reduced the amount of memory reserved for USB serial control requests.  It
	  was unnecessarily large.
	* Added LPC214x SPI1 driver to interface with MMC on mcu123.com board.
	* Added a simple SPI-based MMC/SD block driver
	* NSH: Add LPC214x-specific support to NSH; NSH now mounts any SD cards in the slot.
	* FAT: Fix access to unaligned 32-bit values in partion table (start sector & size)
	* Fixed a problem with a un-initialized variable in the USB serial driver.
	* Added USB storage NXP LPC214x configuration
	* Added a test for USB storage under examples/usbstorage
	* Fixed a bug in the LPC214x USB driver: It was not properly clearing a HALTed
	  endpoints (other than EP) on receipt of CLEAR FEATURES request.
	* Added USB storage class device side driver (BBB)
	* Fixed a bug in the LPC214x USB driver: It was not properly handling request buffers
	  larger then the endpoint's max packet (DM320 driver also fixed, untested)
	* Added logic to the USB device interface:  A bit is needed to force the driver to
	  to terminate an IN transfer with a short packet (zero-length if necessary).
	* Fix an error in the NXP LPC214x USB device driver that was causing corruption of
	  the request queue (M320 driver also fixed, untested)
	* Correct another error in the NXP LPC214x USB device driver that caused read failures
	  when the request buffer size was larger than maxpacket.
	* Numerous corrections/extensions to the USB tracing logic included in 0.3.16 (but
	  not integrated until 0.3.17)
	* Fixed another bug in the NXP LPC214x USB device driver:  After a stalled endpoint
	  is resumed (view CLEAR FEATURE), we must restart the IN (outgoing) queue.

0.3.18 2008-11-16 Gregory Nutt <spudmonkey@racsa.co.cr>
	* Added port for the STMicro STR71x processor and configuration for the Olimex STR-P711
	  board (STR71x testing is stalled because I have been unable to get OpenOCD to
	  communicate with my JTAG wiggler on Linux).
	* Fix race condition workaround delay in LPC214X SPI logic.  This was also the cause of the
	  very bad MMC/SD performance.
	* Began port of the Hitachi SH-1 using the SH-1/US7032EVB1 board
	* Re-built all configurations that use SDCC and Zilog toolchains to make sure they still
	  build (they didn't, but they do now).
	* Fixed several erroneous "list empty" checks in the CAN driver.
	* Hitachi SH-1 passes (reduced) examples/ostest; the examples/nsh test still fails.
	  There are remaining instabilities that make the port un-usable.  The nature of these is
	  not understood; the behavior is that certain SH-1 instructions stop working as advertised.
	  This could be a silicon problem, some pipeline issue that is not handled properly by the
	  gcc 3.4.5 toolchain (which has very limit SH-1 support to begin with), or perhaps with the
	  CMON debugger.  At any rate, I have exhausted all of the energy that I am willing to put
	  into this cool old processor for the time being.
	* Renamed configuration item CONFIG_PROC_STACK_SIZE as CONFIG_IDLETHREAD_STACKSIZE:  It now
	  only controls the size of the stack for the IDLE thread.  Added CONFIG_USERMAIN_STACKSIZE:
	  This is the size of stack used with the user_start() thread is created.  The two stacks
	  no longer have to be the same.
	* Add a loop device that converts a file into a block device.
	* Each NSH command can not be disabled through a configuration setting. All of these
	 settings make the configuration of NSH potentially complex but also allow it to squeeze
	  into very small memory footprints.
	* Added a block to character (BCH) driver.  This is kind of the reverse of the loop
	  device; it allows you access a block device like a character device.
	* Added strcasecmp() and strncasecmp()
	* NSH: Added the 'dd' command
	* NSH: Added the 'losetup' command
	* Fixed a FAT bug:  After recent changes, it would mount a (invalid) FAT file system
	  even if the medium is not formatted!
	* Corrected two important errors in FAT lseek implementation: (1) the sectors-per-cluster
	  value was being reset to "1" and (2) important lseek logic was omitted when the seek
	  position was zero.
	* Fixed a bug in getopt().  It would fail if on certain combinations of terminal argument
	  types.

0.3.19 2008-11-26 Gregory Nutt <spudmonkey@racsa.co.cr>
	* Add poll() and select() APIs (in the initial check-in, these work only with character devices) 
	* Add poll() methods to /dev/null, /dev/zero, pipes, fifos, and serial drivers.
	* Add examples/poll for testing poll() and select()
	* Fix hostile behavior of getc, fgetc, getchar, etc.: the serial driver was waiting for a
	  full buffer of read data before return.  This means that getc would stall when it needed
	  to refill the input buffer. The old behavior (read full blocks) might be useful in other
	  contexts, so it is still available within the driver as a configuration option.
	* Implement poll() and select() support for TCP/IP sockets
	* Fixed an important bug in the TCP/IP buffering logic.  When TCP/IP read-ahead is enabled
	  and not recv() is in-place when a TCP/IP packet is received, the packet is placed into
	  a read-ahead buffer.  However, the old contents of the read-ahead buffer were not being
	  cleared and old data would contaminate the newly received buffer.
	* Implemented support for connection backlog.  The size of the backlog is specified by the
	  second argument of the standard listen() API.  Hooks are provided to support poll()/select()
	  waiting for connections, with a subsequent call to accept() to use the backlogged connection.
	* Fixed a minor bug in accept().  It should allow the address and addresslen values to be NULL
	* Added first-cut definition for a framebuffer interface (and simulated framebuffer for testing
	  purposes only)
	* Added fixed precision math support
	* Added some color converson routines into what may become a real graphics library someday.
	* Added a framebuffer driver for the DM320 (untested on initial check-in)
	* Network: add support for outgoing multicast addresses
	* Added some rasterizers to the graphics library

0.4.0 2008-12-06 Gregory Nutt <spudmonkey@racsa.co.cr>
	* Initial release of a tiny windowing system for NuttX
	* Add fixed precision sin() and cos() (not well tested at initial check-in)
	* Add an X11-based simulated framebuffer driver
	* The simulated target now has an option (CONFIG_SIM_WALLTIME) that will let the simulation
	  run in more-or-less realtime.
	* Added more more extensive window support:  frames, toolbars, etc.
	* Added support for bitmap fonts
	* Integrated the new font support with a font test in examples/nx
	* Add documentation for NX graphics subsystem

0.4.1 2009-02-06 Gregory Nutt <spudmonkey@racsa.co.cr>
	* Added board support fot the ZiLog eZ80Acclaim! ez80f910200zco Development Kit.
	* Fixed several compilation errors in fixed precision math library when built
	  against toolchains that do not support 64-bit type 'long long'.
	* Fix errors in some function prototypes in dirent.h
	* Add eZ80F91 EMAC driver
	* Fix recvfrom() compilation error -- only noted under ZDS
	* Updated all ARM Make.def files to work with gcc 2.4.2 (However, there are
	  still some build issues associated with that toolchain in use of arm-elf-objcopy
	  -- see the TODO.txt list for details)
	* Fix problems with Z16F and eZ80 compilation introduced with recent changes.

0.4.2 2009-02-28 Gregory Nutt <spudmonkey@racsa.co.cr>

	* M16C: Add support for the Renesas M16C MCU and the SKP16C26 StarterKit. However, 
	  the target cannot be built because the GNU m16c-elf-ld link fails with 
	  the following message:

	    m32c-elf-ld: BFD (GNU Binutils) 2.19 assertion fail /home/Owner/projects/nuttx/buildroot/toolchain_build_m32c/binutils-2.19/bfd/elf32-m32c.c:482

	  Where the reference line is:

	    /* If the symbol is out of range for a 16-bit address,
	       we must have allocated a plt entry.  */
	     BFD_ASSERT (*plt_offset != (bfd_vma) -1);

	  No workaround is known at this time.  This is a show stopper for M16C.

	* eZ80Acclaim!: Fix interrupt vectors positioning; they were being positioned
	  wrong by 64 bytes (Kevin Franzen).
	* eZ80Acclaim!: Corrected some stack handling errors during interrupt handling
	   context save and restore (Kevin Franzen).
	* eZ80Acclaim!: Corrected vector intialization logic (Kevin Franzen).
	* eZ80Acclaim!: Corrected overflow problem in the calculation of UART baud rate
	    divisor, the system timer divisor, and the EMAC poll timer.
	* eZ80Acclaim!: Fixed GPIO pin configuration get serial output
	* eZ80Acclaim!: Correct stack overflow in ostest example configuration
	* eZ80Acclaim!: Fixed restoration of interrupts state on interrupt level context swith.

0.4.3 2009-03-04 Gregory Nutt <spudmonkey@racsa.co.cr>

	* z8Encore! and eZ80Acclaim!: Fixed the serial driver initialization sequence
	* eZ80Acclaim!: Fixed error in vector table:  Missing space set aside for the
	  "unused" vectors.  As a result, all vectors above timer4 were skewed.
	* eZ80Acclaim!: Fixed logic error in UART interrupt handler.
	* Many fixes in FAT file system and in NSH for correct compilation with ZDS-II
	* eZ80Acclaim!: Added and verified a NuttShell (NSH) configuration.
	* eZ80Acclaim!: Correct endian-ness; defconfig files said BIG endian.
	* Restructured parts of the uIP port for correct compilation with ZDS-II
	* eZ80Acclaim!: Complete basic integration of the eZ80F91 EMAC driver.  The
	  driver is basically functional and should mature prior to the 0.4.3 release.
	* Implemented priority inheritance logic for POSIX semaphores.  Because the pthread
	  mutexes are built on semaphores, they will have this property as well.

0.4.4 2009-03-29 Gregory Nutt <spudmonkey@racsa.co.cr>

	* examples/nsh:  A debug option was left on that can (and does) cause
	  infinite loops and stack overflows.
	* net/uip: Correct calculation of checksum on ICMP ping response.
	* examples/dchpd: Added a tiny DHCP server example
	* net/uip: Correct UDP bind behavior.  It should select a valid port number
	  if it receives a port number of zero.
	* netutils/dhcpd:  Corrrect for ZDS compiler.  Fix issue with re-use of a
	  port number. Fixed a number of broadcast-related problems.
	* eZ80Acclaim!: Add a tiny webserver configuration
	* eZ80Acclaim!: Fixed an important bug in the EMAC Tx timeout logic. It was
	  always timing out when the load was heavy and worse, for some reason,
	  resetting the Tx function caused unexpected registers to be reset in
	  the Rcv function was well.
	* Z80: Patch incorported: "[2696648] Z80: interrupt flag stored in parity bit"
	  (submitted by JPelletier).  The is the same fix that was needed for the
	  eZ80 and fixed in 0.4.2.
	* netutils: Added logic to support a simple wget() function
	* examples/wget: Added a test for wget() (untested -- see NOTE)
	* lib/strncasecmp: Fix cut'n'paste error in function name.
	* NSH: Added wget command (untested -- see NOTE).
	* examples/sendmail: A simple sendmail example (untested -- see NOTE)

	NOTE: Features related to wget and sendmail are not tested on the target platform
	in this release and, hence, most likely have problems.  I don't have the correct network
	network setup to perform that testing now (I'm in a hotel).

0.4.5 2009-04-19 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Add an enumeration argument to the SPI chip select and status methods so
	  that the interface can handle more than one device.
	* eZ80Acclaim!: Add a generic SPI driver for all eZ80 boards.
	* Add a setmode() method to the SPI interface to handle parts with differing
	  mode requirements.
	* include/nuttx/i2c.h: Defined a standard I2C interface
	* eZ80Acclaim!: Add an I2C driver.
	* eZ8Encore!: Add an I2C driver.
	* Add support for the Freescale i.MX1/L architecture and a configuration for
	  the Freescale MX1ADS development board.
	* examples/helloxx: Added a simple C++ hello world example
	* include/css: Added std header files
	* libxx: New C++-only directory provides support for minimal C++ applications

0.4.6 2009-05-19 Gregory Nutt <spudmonkey@racsa.co.cr>

	* Change SPI interface so that is can accomodate interfaces where the
	  number of bits per word is greater an 8 (such as with many 9-bit display
	  interfaces). -- this might have broken a few things which will need to
	  be retested!
	* arch/arm/src/imx: Added i.MX SPI driver
	* SPI: Add a method to set the number of bits per word.  Also add an
	  alternative interface for so that (eventually) I can phase the sndblock
	  and recvblock methods and replace them with a single exchange method
	* Build:  objcopy fails with toolchains that use newer GCC and binutils.  The
	  following arguments need to be included in the objcopy command line "-R .note
	  -R .note.gnu.build-id -R .comment"  This has bin fixed in arch/arm/src/Makefile,
	  but other architectures may have the same problem.  Thanks to Dave Marples
	  for verifying this.
	* configs/eagle100/ostest: Added support for the MicroMint Eagle100 board. 
	  This board has a Luminary LM3S6918 Cortex-M3. Added a configuration to build
	  examples/ostest.
	* arch/arm/src/lpc214x: Add configuration option to enable fast GPIO (vs.
	  legacy, "slow" GPIO) for LPC214x.
	* arch/arm: Restructured the arch/arm directory structure to better suppor ARM
	  and Cortex-M3.
	* sched/: pthread_create() must return a (non-negated) errno value on failure.
	* configs/eagle100/nsh: Add a NuttShell (NSH) configuration for the Eagle-100

0.4.7 2009-05-29 Gregory Nutt <spudmonkey@racsa.co.cr>

	* arch/arm/src/lm3s: Added an Ethernet driver for the LM3S6918
	* configs/eagle100/nettest: Added an examples/nettest configuration for the
	  Micromint Eagle100 board.
	* Documentation/NuttxPortingGuide.html: Added a section on NuttX device drivers.
	* configs/eagle100/httpd: Added an examples/uip configuration for the
	  Micromint Eagle100 board.
	* arch/arm/src/lm3s: Added an SSI driver for the LM3S6918
	* examples/nsh: Added MMC/SD support for the LM3S6918
	* arch/arm/src/lm3s: Fix logic for setting and clearing output GPIOs (critical
	  fix!).
	* drivers/mmcsd: Found numerous errors in current MMC/SD SPI driver.  Bad frequency
	  calculation based on CSD settings, inappropriate timeouts, odd code that looks like
	  a bad search and replace.  Also needs support for SDHC ver 2.x.  New MMC/SD is
	  largely redesigned and probably non-functional in the first check-in.
	* drivers/mmcsd: Changes verified on 4Gb Kingston microSHDC card and on a 2Gb
	  SanDisk microSDC card on the Eagle100 platform.
	* fs/fat: With the 4Gb card, the first tests of FAT32 were (finally) performed.
	  Found and corrected a problem that prevented use of FAT32: It was not updating
	  the sector cache before checking the FAT32 FSINFO sector.
	* configs/eagle100/*/Make.defs:  Added configuration options that should make
	  it possible to build NuttX for the Eagle100 using CodeSourcery 2009q1 toolchain
	  and the devkitARM GNU toolchain.
	* configs/mcu123-lpc214x/src: Corrected some logic in the LPC2148 SPI receive block
	  logic.  Re-verified SDC ver1.x support with 1Gb Toshiba SDC, 1Gb PNY SDC, and
	  4Gb Kingston SDHC.  There are CMD0 issues with the 2Gb SanDisk SDC on this board.
	* fs/fs_mount.c: Corrected error handling that could cause a deadlock on certain
	  mount() failures.

0.4.8 2009-06-13 Gregory Nutt <spudmonkey@racsa.co.cr>

	* lib/lib_*stream.c: Extend internal stream logic to support incoming streams.
	* arch/arm/src/str71x: Serial output is now correct and timer interrupts are
	  working.  The test at configs/olimex-strp711/ostest passes.  This means that
	  the basic STR-P711 port is complete.
	* configs/olimex-strp711/nsh:  Add and verifed a NuttShell (NSH) configuration
	  for the STR-P711.
	* arch/arm/str71x/str71x_serial.c:  The STR711 interrupt driven serial driver
	  finally works after some extradinary measures to handle missed interrupts.
	  NSH is fully functional on the Olimex STR-P711 board.
	* example/nsh: Moved architecture specific files from NSH directory to board-
	  specific directories.
	* config/olimex-strp711/src/up_nsh.c:  Add an NSH board specific directory for
	  for the Olimex STR7P11 board.
	* Fixed build of LM3X6918 using the CodeSourcery Windows native toolchain.  There
	  were lots of issues with Cygwin paths and Cygwin symbolic links.  These changes
	  may work with the devarmKIT as well, but that remains untested.
	* The NXP LPC2148 and STR711 targets can now also be built using the CodeSourcery
	  or devkitARM Windows native toolchains.

0.4.8 2009-xx-xx Gregory Nutt <spudmonkey@racsa.co.cr>

	* Add strtoll() and strtoull(); Add macros for atol() and atoll().
	* dup() and dup2() will now clone socket descriptors
	* All socket descriptors ar now cloned when when a new task is started
	  via task_create().
	* Add configuration options to suppress or eliminate cloning of file
	  and/or socket descriptors when a new task is started by task_create():
	  CONFIG_FDCLONE_DISABLE, CONFIG_FDCLONE_STDIO, CONFIG_SDCLONE_DISABLE.
	* Use of C++ reserved word 'private' in C header files causes problems
	  for C++ that include them.


